// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: users.sql

package orm

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (fname, lname, email, enc_passwd) 
VALUES ($1::varchar(100), $2::varchar(100), $3::varchar(100), crypt($4::varchar, gen_salt('bf'))) 
RETURNING id, fname, lname, email, enc_passwd, created_at
`

type CreateUserParams struct {
	Fname  string
	Lname  string
	Email  string
	Passwd string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Fname,
		arg.Lname,
		arg.Email,
		arg.Passwd,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.EncPasswd,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :execrows
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUserByID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, fname, lname, email, created_at FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID        int32
	Fname     string
	Lname     string
	Email     string
	CreatedAt time.Time
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, fname, lname, email, created_at FROM users
WHERE 
id > $1::INTEGER AND
(CASE WHEN $2::boolean 
    THEN  $3::VARCHAR(100) ILIKE email ELSE true END) AND
(CASE WHEN $4::boolean 
    THEN  $5::VARCHAR(100) ILIKE fname ELSE true END) AND
(CASE WHEN $6::boolean 
    THEN  $7::VARCHAR(100) ILIKE lname ELSE true END) 
ORDER BY id
LIMIT CASE WHEN $8::boolean THEN $9::INT END
`

type ListUsersParams struct {
	ID         int32
	WhereEmail bool
	Email      string
	WhereFname bool
	Fname      string
	WhereLname bool
	Lname      string
	UseRlimit  bool
	Rlimit     int32
}

type ListUsersRow struct {
	ID        int32
	Fname     string
	Lname     string
	Email     string
	CreatedAt time.Time
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers,
		arg.ID,
		arg.WhereEmail,
		arg.Email,
		arg.WhereFname,
		arg.Fname,
		arg.WhereLname,
		arg.Lname,
		arg.UseRlimit,
		arg.Rlimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Fname,
			&i.Lname,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
