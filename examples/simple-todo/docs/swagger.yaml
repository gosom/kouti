basePath: /api/v1/
consumes:
- application/json
definitions:
  todos.Todo:
    type: object
  todos.TodoCreate:
    type: object
  um.Role:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  users.L:
    properties:
      accessToken:
        type: string
    type: object
  users.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      roles:
        items:
          $ref: '#/definitions/um.Role'
        type: array
      updatedAt:
        type: string
    type: object
  users.UserCreate:
    properties:
      email:
        example: aris.paparis@example.com
        type: string
      password:
        example: Ar9Sp7891!!#
        type: string
    required:
    - email
    - password
    type: object
  users.UserLogin:
    properties:
      email:
        example: aris.paparis@example.com
        type: string
      password:
        example: Ar9Sp7891!!#
        type: string
    required:
    - email
    - password
    type: object
  web.ErrHTTP:
    properties:
      errors:
        items:
          type: string
        type: array
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: Giorgos
    url: https://github.com/gosom/kouti/issues
  description: |-
    This is a sample server todo server.
    You can visit the GitHub repository at https://github.com/gosom/kouti
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Todo API based on kouti
  version: "0.1"
paths:
  /users:
    post:
      operationId: create-user
      parameters:
      - description: the body to create a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/users.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrHTTP'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/web.ErrHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrHTTP'
      summary: Create a user
  /users/:
    get:
      operationId: select-users
      parameters:
      - description: the id of the next user (used for pagination)
        in: query
        name: next
        type: integer
      - description: the number of results per page
        in: query
        name: pageSize
        type: integer
      - description: filter by email
        in: query
        name: email
        type: string
      - description: filter by firstName
        in: query
        name: firstName
        type: string
      - description: filter by lastName
        in: query
        name: lastName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrHTTP'
      summary: Returns a list of users
  /users/{id}:
    delete:
      operationId: delete-user
      parameters:
      - description: the id of the user to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrHTTP'
      summary: Deletes user with id
    get:
      operationId: get-user
      parameters:
      - description: the id of the user to fetch
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrHTTP'
      summary: Returns user with id
  /users/login:
    post:
      operationId: login-user
      parameters:
      - description: the body to login a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/users.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.L'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrHTTP'
      summary: returns a JWT access token
  /users/search:
    get:
      operationId: search-users
      parameters:
      - description: the id of the next user (used for pagination)
        in: query
        name: next
        type: integer
      - description: the number of results per page
        in: query
        name: pageSize
        type: integer
      - description: search term
        in: query
        name: searchTerm
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrHTTP'
      summary: Returns a list of users
produces:
- application/json
swagger: "2.0"
